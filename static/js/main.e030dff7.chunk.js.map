{"version":3,"sources":["servicos/upload.js","App.js","serviceWorker.js","index.js"],"names":["Upload","props","showFile","event","a","preventDefault","reader","FileReader","onload","text","target","result","console","log","onChangefile","readAsText","files","render","type","onChange","Component","App","useState","instrucao","setInstrucao","tabela","coluna0","coluna1","coluna2","coluna3","coluna4","coluna5","className","map","header","linha","index","separaInstrucao","split","checked","breakpoint","aux","onChangeBB","readOnly","file","class","onClick","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e030dff7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Upload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  showFile = async (event) => {\r\n    event.preventDefault();\r\n    const reader = new FileReader();\r\n    reader.onload = async (event) => {\r\n      const text = event.target.result;\r\n      console.log(text);\r\n      this.props.onChangefile(text);\r\n    };\r\n    reader.readAsText(event.target.files[0]);\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div>\r\n        <input type=\"file\" onChange={(event) => this.showFile(event)} />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Upload;\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport Up from \"./servicos/upload\";\r\nfunction App() {\r\n  const [instrucao, setInstrucao] = useState([]);\r\n  const tabela = [\r\n    {\r\n      coluna0: \"BreakPoint\",\r\n      coluna1: \"L\",\r\n      coluna2: \"Instruções\",\r\n      coluna3: \"Atributo #1\",\r\n      coluna4: \"Atributo #2\",\r\n      coluna5: \"Comentarios\",\r\n    },\r\n  ];\r\n\r\n  const pilha = [\r\n    {\r\n      coluna1: \"Endereço\",\r\n      coluna2: \"Valor\",\r\n    },\r\n  ];\r\n\r\n  const compila = () => {\r\n    if (instrucao.instrucao == \"START\") {\r\n      console.log(\"entrou\");\r\n    } else {\r\n      console.log(\"deu ruim\");\r\n    }\r\n  };\r\n\r\n  const onChangeBB = (event, index) => {\r\n    let aux = [...instrucao];\r\n    aux[index].breakpoint = event.target.checked;\r\n    setInstrucao(aux);\r\n  };\r\n\r\n  const onChangeFile = (file) => {\r\n    setInstrucao(\r\n      file.split(\"\\r\\n\").map((instrucao) => ({ instrucao, breakpoint: false }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"principal\">\r\n      <div>\r\n        <div className=\"instrucoes\">\r\n          <p>Instruções a serem executadas pela VM</p>\r\n          <table className=\"tabela\">\r\n            {tabela.map((header) => {\r\n              return (\r\n                <tr className=\"tabela\">\r\n                  <td className=\"tabela\">{header.coluna0}</td>\r\n                  <td className=\"tabela\">{header.coluna1}</td>\r\n                  <td className=\"tabela\">{header.coluna2}</td>\r\n                  <td className=\"tabela\">{header.coluna3}</td>\r\n                  <td className=\"tabela\">{header.coluna4}</td>\r\n                  <td className=\"tabela\">{header.coluna5}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n            {instrucao.map((linha, index) => {\r\n              let separaInstrucao = linha.instrucao.split(\" \");\r\n              return (\r\n                <tr className=\"tabela\">\r\n                  <td className=\"tabela\">\r\n                    <center>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={linha.breakpoint}\r\n                        onChange={(event) => onChangeBB(event, index)}\r\n                      />\r\n                    </center>\r\n                  </td>\r\n                  <td className=\"tabela\">{index + 1}</td>\r\n                  <td className=\"tabela\">{separaInstrucao[0]}</td>\r\n                  <td className=\"tabela\">{separaInstrucao[1]}</td>\r\n                  <td className=\"tabela\">{separaInstrucao[2]}</td>\r\n                  <td className=\"tabela\">{separaInstrucao[3]}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </table>\r\n        </div>\r\n        <div className=\"mainJanelas\">\r\n          <div className=\"janelas\">\r\n            <p>Janela de Entrada</p>\r\n            <textarea></textarea>\r\n          </div>\r\n          <div className=\"janelas\">\r\n            <p>Janela de Saída</p>\r\n            <textarea readOnly></textarea>\r\n          </div>\r\n          <div className=\"janelas\">\r\n            <p>BreakPoint</p>\r\n            <textarea readOnly></textarea>\r\n          </div>\r\n        </div>\r\n        <div className=\"mainJanelas\">\r\n          <div>\r\n            <Up onChangefile={onChangeFile} />\r\n          </div>\r\n          <div>\r\n            <button class=\"botao\" type=\"button\" onClick={compila}>\r\n              Compilar\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button class=\"botao\" type=\"button\">\r\n              Proximo\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"pilha\">\r\n        <p>Conteúdo da Pilha</p>\r\n        <table className=\"tabela\">\r\n          {tabela.map((linha) => {\r\n            return (\r\n              <tr className=\"tabela\">\r\n                <td className=\"tabela\">{linha.coluna1}</td>\r\n                <td className=\"tabela\">{linha.coluna2}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}